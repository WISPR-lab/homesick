# More colors
set -g default-terminal 'screen-256color'

# Act like vim
setw -g mode-keys vi
set -g status-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind -T copy-mode-vi "v" send -X begin-selection
bind -T copy-mode-vi "V" send -X rectangle-toggle
bind -T copy-mode-vi "y" send -X copy-selection-and-cancel

# Act like GNU screen
bind b send-prefix
bind C-b send-prefix

# Size windows based on clients looking at that window
setw -g aggressive-resize on

# Enable mouse control
set -g mouse on

# Create windows in the same directory
bind c new-window -c "#{pane_current_path}"
unbind %
unbind '"'
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Enable and disable keyboard input for panes
bind < select-pane -d \; display-message "input disabled"
bind > select-pane -e \; display-message "input enabled"

# Start window numbers at 1 to match keyboard order with tmux order
set -g base-index 1

# Start pane numbers at 1 to match keyboard order with tmux order
setw -g pane-base-index 1

# Renumber windows sequentially after closing any of them
set -g renumber-windows on

# Monitor window for activity
setw -g monitor-activity on

# Don't wait for escape sequences
set -sg escape-time 0

# Increase scrollback lines
set -g history-limit 65536

# Display pane numbers for longer
set -g display-panes-time 2000

# <prefix>! breaks current pane into separate window
# join a pane/window from the current session into the current window
bind @ command-prompt -p "create pane from:" "join-pane -s ':%%'"

set -g status-left-length 20
set -g status-left '#{?pane_input_off,#[fg=colour160],#[fg=colour136]}[#[fg=colour136]#S:#I.#P#{?pane_input_off,#[fg=colour160],#[fg=colour136]}] '
set -g status-right '#[fg=colour166]#([ "$(tmux show-option -g prefix)" != "prefix C-b" ] && echo "($(tmux show-option -g prefix | cut -c 8-)) ")#[fg=colour33]%d %b %Y #{?client_prefix,#[fg=colour160],#[fg=colour61]}- #[fg=colour64]%I:%M %p #{?client_prefix,#[fg=colour160],#[fg=colour61]}- #[fg=colour37]#([ -f $HOME/.name ] && cat $HOME/.name || hostname)'

#### Color (Solarized 256)
set -g status-style bg=colour235,fg=colour136
setw -g window-status-style fg=colour244
setw -g window-status-current-style fg=colour166
setw -g window-status-activity-style fg=colour61
setw -g window-status-bell-style fg=colour61
set -g pane-border-style fg=colour235
set -g pane-active-border-style fg=colour240
set -g message-style bg=colour235,fg=colour166

# Pane number display
set -g display-panes-active-colour colour166 #blue
set -g display-panes-colour colour33 #orange

# Clock
setw -g clock-mode-colour colour64 #green

# Reenable automatic renaming for the current window
bind N setw automatic-rename on \; display-message "automatic rename enabled"

# Renumber windows sequentially after closing any of them
set -g renumber-windows on

#set -g status-right "#(~/30hrClockTime.sh)"

# Place status bar on the top
set-option -g status-position top
